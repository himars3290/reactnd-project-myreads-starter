{"version":3,"sources":["BooksAPI.js","Book.js","BookGrid.js","SearchBooks.js","BookShelf.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","Book","_this$props","this","props","onShelfChange","undefined","thumbnail","imageLinks","react_default","a","createElement","className","style","width","height","backgroundImage","value","onChange","event","target","disabled","text","map","option","key","title","authors","join","Component","BookGrid","updateBookShelf","changedShelf","BooksAPI","response","_this","refresh","_this2","src_Book","SearchBooks","state","clearBooks","setState","searchBooks","booksWithCat","updateState","b","readBooksIds","includes","currentlyReadingIds","wantToReadIds","updateQuery","input","trim","length","prevProps","refreshBookShelves","react_router_dom","to","type","placeholder","src_BookGrid","BookShelf","name","BooksApp","readBooks","currentlyReadingBooks","wantToReadBooks","catBookIds","getBooks","booksFromAPI","prevState","filter","user","changedBooks","currentlyReading","read","wantToRead","_this$state","react_router","exact","path","render","src_BookShelf","_ref","history","src_SearchBooks","React","ReactDOM","src_App","document","getElementById"],"mappings":"sQACMA,EAAM,wCAIRC,EAAQC,aAAaD,MACpBA,IACHA,EAAQC,aAAaD,MAAQE,KAAKC,SAASC,SAAS,IAAIC,QAAQ,IAElE,IAAMC,EAAU,CACdC,OAAU,mBACVC,cAAiBR,GAQNS,EAAS,kBACpBC,MAAK,GAAAC,OAAIZ,EAAJ,UAAiB,CAAEO,YACrBM,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIA,EAAKC,SAEVC,EAAS,SAACC,EAAMC,GAAP,OACpBT,MAAK,GAAAC,OAAIZ,EAAJ,WAAAY,OAAiBO,EAAKE,IAAM,CAC/BC,OAAQ,MACRf,QAAQgB,OAAAC,EAAA,EAAAD,CAAA,GACHhB,EADE,CAELkB,eAAgB,qBAElBC,KAAMC,KAAKC,UAAU,CAAER,YACtBP,KAAK,SAAAC,GAAG,OAAIA,EAAIC,UAERc,EAAS,SAACC,GAAD,OACpBnB,MAAK,GAAAC,OAAIZ,EAAJ,WAAkB,CACrBsB,OAAQ,OACRf,QAAQgB,OAAAC,EAAA,EAAAD,CAAA,GACHhB,EADE,CAELkB,eAAgB,qBAElBC,KAAMC,KAAKC,UAAU,CAAEE,YACtBjB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIA,EAAKC,wBCoBRc,mLA5DX,IADOC,EAmByBC,KAAKC,MAA7Bf,EAnBDa,EAmBCb,KAAMgB,EAnBPH,EAmBOG,cACRf,OAAuBgB,IAAfjB,EAAKC,MAAsBD,EAAKC,MAAQ,OAChDiB,OACgBD,IAApBjB,EAAKmB,WAA2BnB,EAAKmB,WAAWD,UAAY,OAC9D,OACEE,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,aACVC,MAAO,CACLC,MAAO,IACPC,OAAQ,IACRC,gBAAe,OAAAlC,OAASyB,EAAT,QAInBE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,UACEM,MAAO3B,EACP4B,SAAU,SAAAC,GAAK,OAAId,EAAchB,EAAM8B,EAAMC,OAAOH,SAEpDR,EAAAC,EAAAC,cAAA,UAAQM,MAAM,OAAOI,UAAQ,GAA7B,cAxCI,CACd,CACEJ,MAAO,mBACPK,KAAM,qBAER,CACEL,MAAO,aACPK,KAAM,gBAER,CACEL,MAAO,OACPK,KAAM,QAER,CACEL,MAAO,OACPK,KAAM,SA4BWC,IAAI,SAAAC,GAAM,OACjBf,EAAAC,EAAAC,cAAA,UAAQc,IAAKD,EAAOP,MAAOA,MAAOO,EAAOP,OACtCO,EAAOF,WAMlBb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcvB,EAAKqC,OAClCjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACKN,IAAjBjB,EAAKsC,QAAwB,GAAKtC,EAAKsC,QAAQC,KAAK,gBAvD9CC,aCyBJC,6MAtBbC,gBAAkB,SAAC1C,EAAM2C,GACvBC,EAAgB5C,EAAM2C,GAAcjD,KAAK,SAAAmD,GACnCC,EAAK/B,MAAMgC,SACbD,EAAK/B,MAAMgC,QAAQF,8EAIhB,IAAAG,EAAAlC,KACChB,EAAUgB,KAAKC,MAAfjB,MACR,OACEsB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACXzB,EAAMoC,IAAI,SAAAlC,GAAI,OACboB,EAAAC,EAAAC,cAAC2B,EAAD,CACEb,IAAKpC,EAAKE,GACVF,KAAMA,EACNgB,cAAegC,EAAKN,4BAhBTF,aC6FRU,6MA3FbC,MAAQ,CACNxC,MAAO,GACPb,MAAO,MAETsD,WAAa,WACXN,EAAKO,SAAS,iBAAO,CACnBvD,MAAO,SAOXwD,YAAc,SAAA3C,GAAS,IACb4C,EAAiBT,EAAK/B,MAAtBwC,aACRX,EAAgBjC,GAAOjB,KAAK,SAAAmD,QACT5B,IAAb4B,QAAgD5B,IAAtB4B,EAAQ,MACpCC,EAAKU,YAAYX,EAAUU,GAE3BT,EAAKM,kBAIXI,YAAc,SAAC1D,EAAOyD,GACpBT,EAAKO,SAAS,iBAAO,CACnBvD,MAAOA,EAAMoC,IAAI,SAAAlC,GACf,IAAMyD,EAAIzD,EAQV,OAPIuD,EAAaG,aAAaC,SAASF,EAAEvD,IACvCuD,EAAExD,MAAQ,OACDsD,EAAaK,oBAAoBD,SAASF,EAAEvD,IACrDuD,EAAExD,MAAQ,mBACDsD,EAAaM,cAAcF,SAASF,EAAEvD,MAC/CuD,EAAExD,MAAQ,cAELwD,UAIbK,YAAc,SAAAC,GACZjB,EAAKO,SACH,iBAAO,CACL1C,MAAOoD,EAAMC,SAEf,WACMlB,EAAKK,MAAMxC,MAAMsD,OAAS,EAC5BnB,EAAKQ,YAAYR,EAAKK,MAAMxC,OAE5BmC,EAAKM,kGAtCMc,GACbA,EAAUX,eAAiBzC,KAAKC,MAAMwC,cACxCzC,KAAK0C,YAAY1C,KAAKqC,MAAMrD,MAAOgB,KAAKC,MAAMwC,+CAyCzC,IAAAP,EAAAlC,KACChB,EAAUgB,KAAKqC,MAAfrD,MACAqE,EAAuBrD,KAAKC,MAA5BoD,mBACR,OACE/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAMC,GAAG,WAAW9C,UAAU,gBAA9B,SAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,SACEgD,KAAK,OACLC,YAAY,4BACZ1C,SAAU,SAAAC,GAAK,OAAIkB,EAAKc,YAAYhC,EAAMC,OAAOH,YAIvDR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACZzB,EAAMmE,OAAS,GACd7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACkD,EAAD,CACE1E,MAAOA,EACPiD,QAAS,SAAAF,GACPsB,EAAmBtB,OAM1B/C,EAAMmE,QAAU,GACf7C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,gCApFYkB,aCgBXiC,mLAjBJ,IAAA5D,EACqCC,KAAKC,MAAzC2D,EADD7D,EACC6D,KAAM5E,EADPe,EACOf,MAAOqE,EADdtD,EACcsD,mBACrB,OACE/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAmBmD,GACjCtD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACkD,EAAD,CACE1E,MAAOA,EACPiD,QAAS,SAAAF,GACPsB,EAAmBtB,eAVTL,aC2HTmC,6MAtHbxB,MAAQ,CACNrD,MAAO,GACP8E,UAAW,GACXC,sBAAuB,GACvBC,gBAAiB,GACjBC,WAAY,CACVrB,aAAc,GACdG,cAAe,GACfD,oBAAqB,OAMzBoB,SAAW,WACTpC,IAAkBlD,KAAK,SAAAuF,GACrBnC,EAAKU,YAAYyB,QAGrBzB,YAAc,SAAA1D,GACZgD,EAAKO,SAAS,SAAA6B,GAAS,MAAK,CAC1BpF,MAAOA,EACP8E,UAAW9E,EAAMqF,OAAO,SAAAnF,GAAI,MAAmB,SAAfA,EAAKC,QACrC4E,sBAAuB/E,EAAMqF,OAC3B,SAAAnF,GAAI,MAAmB,qBAAfA,EAAKC,QAEf6E,gBAAiBhF,EAAMqF,OAAO,SAAAnF,GAAI,MAAmB,eAAfA,EAAKC,QAC3C8E,WAAW3E,OAAAC,EAAA,EAAAD,CAAA,GACN8E,EAAUE,KADL,CAER1B,aAAc5D,EACXqF,OAAO,SAAAnF,GAAI,MAAmB,SAAfA,EAAKC,QACpBiC,IAAI,SAAAuB,GAAC,OAAIA,EAAEvD,KACd2D,cAAe/D,EACZqF,OAAO,SAAAnF,GAAI,MAAmB,eAAfA,EAAKC,QACpBiC,IAAI,SAAAuB,GAAC,OAAIA,EAAEvD,KACd0D,oBAAqB9D,EAClBqF,OAAO,SAAAnF,GAAI,MAAmB,qBAAfA,EAAKC,QACpBiC,IAAI,SAAAuB,GAAC,OAAIA,EAAEvD,aAIpBiE,mBAAqB,SAAAtB,GACnB,IAAMwC,EAAevC,EAAKK,MAAMrD,MAAMoC,IAAI,SAAAlC,GAQxC,OAPI6C,EAASyC,iBAAiB3B,SAAS3D,EAAKE,IAC1CF,EAAKC,MAAQ,mBACJ4C,EAAS0C,KAAK5B,SAAS3D,EAAKE,IACrCF,EAAKC,MAAQ,OACJ4C,EAAS2C,WAAW7B,SAAS3D,EAAKE,MAC3CF,EAAKC,MAAQ,cAERD,IAET8C,EAAKU,YAAY6B,uFAxCjBvE,KAAKkE,4CA0CE,IAAAhC,EAAAlC,KAAA2E,EAMH3E,KAAKqC,MAJPyB,EAFKa,EAELb,UACAC,EAHKY,EAGLZ,sBACAC,EAJKW,EAILX,gBACAC,EALKU,EAKLV,WAEF,OACE3D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAACoE,EAAA,EAAD,CACEC,OAAK,EACLC,KAAK,WACLC,OAAQ,kBACNzE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,sBAEFF,EAAAC,EAAAC,cAACwE,EAAD,CACE3B,mBAAoB,SAAAtB,GAClBG,EAAKmB,mBAAmBtB,IAE1B6B,KAAK,oBACL5E,MAAO+E,IAETzD,EAAAC,EAAAC,cAACwE,EAAD,CACE3B,mBAAoB,SAAAtB,GAClBG,EAAKmB,mBAAmBtB,IAE1B6B,KAAK,eACL5E,MAAOgF,IAET1D,EAAAC,EAAAC,cAACwE,EAAD,CACE3B,mBAAoB,SAAAtB,GAClBG,EAAKmB,mBAAmBtB,IAE1B6B,KAAK,OACL5E,MAAO8E,IAETxD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAMC,GAAG,kBAAkB9C,UAAU,eAArC,mBAQRH,EAAAC,EAAAC,cAACoE,EAAA,EAAD,CACEE,KAAK,kBACLC,OAAQ,SAAAE,KAAGC,QAAH,OACN5E,EAAAC,EAAAC,cAAC2E,EAAD,CACE9B,mBAAoB,SAAAtB,GAClBG,EAAKgC,YAEPzB,aAAcwB,gBA9GPmB,IAAM1D,iBCD7B2D,IAASN,OACPzE,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,KACEhD,EAAAC,EAAAC,cAAC8E,EAAD,MAAQ,KAEVC,SAASC,eAAe","file":"static/js/main.04a9e430.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from \"react\";\nclass Book extends Component {\n  render() {\n    const options = [\n      {\n        value: \"currentlyReading\",\n        text: \"Currently Reading\"\n      },\n      {\n        value: \"wantToRead\",\n        text: \"Want to Read\"\n      },\n      {\n        value: \"read\",\n        text: \"Read\"\n      },\n      {\n        value: \"none\",\n        text: \"None\"\n      }\n    ];\n    const { book, onShelfChange } = this.props;\n    const shelf = book.shelf !== undefined ? book.shelf : \"none\";\n    const thumbnail =\n      book.imageLinks !== undefined ? book.imageLinks.thumbnail : \"none\";\n    return (\n      <li>\n        <div className=\"book\">\n          <div className=\"book-top\">\n            <div\n              className=\"book-cover\"\n              style={{\n                width: 128,\n                height: 193,\n                backgroundImage: `url(${thumbnail})`\n              }}\n            />\n\n            <div className=\"book-shelf-changer\">\n              <select\n                value={shelf}\n                onChange={event => onShelfChange(book, event.target.value)}\n              >\n                <option value=\"move\" disabled>\n                  Move to...\n                </option>\n                {options.map(option => (\n                  <option key={option.value} value={option.value}>\n                    {option.text}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n          <div className=\"book-title\">{book.title}</div>\n          <div className=\"book-authors\">\n            {book.authors === undefined ? \"\" : book.authors.join(\", \")}\n          </div>\n        </div>\n      </li>\n    );\n  }\n}\nexport default Book;\n","import React, { Component } from \"react\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport Book from \"./Book.js\";\nclass BookGrid extends Component {\n  updateBookShelf = (book, changedShelf) => {\n    BooksAPI.update(book, changedShelf).then(response => {\n      if (this.props.refresh) {\n        this.props.refresh(response);\n      }\n    });\n  };\n  render() {\n    const { books } = this.props;\n    return (\n      <ol className=\"books-grid\">\n        {books.map(book => (\n          <Book\n            key={book.id}\n            book={book}\n            onShelfChange={this.updateBookShelf}\n          />\n        ))}\n      </ol>\n    );\n  }\n}\nexport default BookGrid;\n","import React, { Component } from \"react\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport BookGrid from \"./BookGrid.js\";\nimport { Link } from \"react-router-dom\";\nclass SearchBooks extends Component {\n  state = {\n    query: \"\",\n    books: []\n  };\n  clearBooks = () => {\n    this.setState(() => ({\n      books: []\n    }));\n  };\n  componentDidUpdate(prevProps) {\n    if (prevProps.booksWithCat !== this.props.booksWithCat)\n      this.updateState(this.state.books, this.props.booksWithCat);\n  }\n  searchBooks = query => {\n    const { booksWithCat } = this.props;\n    BooksAPI.search(query).then(response => {\n      if (response !== undefined && response[\"error\"] === undefined) {\n        this.updateState(response, booksWithCat);\n      } else {\n        this.clearBooks();\n      }\n    });\n  };\n  updateState = (books, booksWithCat) => {\n    this.setState(() => ({\n      books: books.map(book => {\n        const b = book;\n        if (booksWithCat.readBooksIds.includes(b.id)) {\n          b.shelf = \"read\";\n        } else if (booksWithCat.currentlyReadingIds.includes(b.id)) {\n          b.shelf = \"currentlyReading\";\n        } else if (booksWithCat.wantToReadIds.includes(b.id)) {\n          b.shelf = \"wantToRead\";\n        }\n        return b;\n      })\n    }));\n  };\n  updateQuery = input => {\n    this.setState(\n      () => ({\n        query: input.trim()\n      }),\n      () => {\n        if (this.state.query.length > 0) {\n          this.searchBooks(this.state.query);\n        } else {\n          this.clearBooks();\n        }\n      }\n    );\n  };\n  render() {\n    const { books } = this.state;\n    const { refreshBookShelves } = this.props;\n    return (\n      <div className=\"search-books\">\n        <div className=\"search-books-bar\">\n          <Link to=\"/myreads\" className=\"close-search\">\n            Close\n          </Link>\n          <div className=\"search-books-input-wrapper\">\n            <input\n              type=\"text\"\n              placeholder=\"Search by title or author\"\n              onChange={event => this.updateQuery(event.target.value)}\n            />\n          </div>\n        </div>\n        <div className=\"search-books-results\">\n          {books.length > 0 && (\n            <div className=\"bookshelf-books\">\n              <BookGrid\n                books={books}\n                refresh={response => {\n                  refreshBookShelves(response);\n                }}\n              />\n            </div>\n          )}\n\n          {books.length <= 0 && (\n            <div>\n              <p> No books</p>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\nexport default SearchBooks;\n","import React, { Component } from \"react\";\nimport BookGrid from \"./BookGrid.js\";\nclass BookShelf extends Component {\n  render() {\n    const { name, books, refreshBookShelves } = this.props;\n    return (\n      <div className=\"bookshelf\">\n        <h2 className=\"bookshelf-title\">{name}</h2>\n        <div className=\"bookshelf-books\">\n          <BookGrid\n            books={books}\n            refresh={response => {\n              refreshBookShelves(response);\n            }}\n          />\n        </div>\n      </div>\n    );\n  }\n}\nexport default BookShelf;\n","import React from \"react\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport \"./App.css\";\nimport { Route, Link } from \"react-router-dom\";\nimport SearchBooks from \"./SearchBooks.js\";\nimport BookShelf from \"./BookShelf.js\";\nclass BooksApp extends React.Component {\n  state = {\n    books: [],\n    readBooks: [],\n    currentlyReadingBooks: [],\n    wantToReadBooks: [],\n    catBookIds: {\n      readBooksIds: [],\n      wantToReadIds: [],\n      currentlyReadingIds: []\n    }\n  };\n  componentDidMount() {\n    this.getBooks();\n  }\n  getBooks = () => {\n    BooksAPI.getAll().then(booksFromAPI => {\n      this.updateState(booksFromAPI);\n    });\n  };\n  updateState = books => {\n    this.setState(prevState => ({\n      books: books,\n      readBooks: books.filter(book => book.shelf === \"read\"),\n      currentlyReadingBooks: books.filter(\n        book => book.shelf === \"currentlyReading\"\n      ),\n      wantToReadBooks: books.filter(book => book.shelf === \"wantToRead\"),\n      catBookIds: {\n        ...prevState.user,\n        readBooksIds: books\n          .filter(book => book.shelf === \"read\")\n          .map(b => b.id),\n        wantToReadIds: books\n          .filter(book => book.shelf === \"wantToRead\")\n          .map(b => b.id),\n        currentlyReadingIds: books\n          .filter(book => book.shelf === \"currentlyReading\")\n          .map(b => b.id)\n      }\n    }));\n  };\n  refreshBookShelves = response => {\n    const changedBooks = this.state.books.map(book => {\n      if (response.currentlyReading.includes(book.id)) {\n        book.shelf = \"currentlyReading\";\n      } else if (response.read.includes(book.id)) {\n        book.shelf = \"read\";\n      } else if (response.wantToRead.includes(book.id)) {\n        book.shelf = \"wantToRead\";\n      }\n      return book;\n    });\n    this.updateState(changedBooks);\n  };\n  render() {\n    const {\n      readBooks,\n      currentlyReadingBooks,\n      wantToReadBooks,\n      catBookIds\n    } = this.state;\n    return (\n      <div className=\"app\">\n        <div className=\"list-books\">\n          <Route\n            exact\n            path=\"/myreads\"\n            render={() => (\n              <div className=\"list-books\">\n                <div className=\"list-books-title\">\n                  <h1>MyReads</h1>\n                </div>\n                <BookShelf\n                  refreshBookShelves={response => {\n                    this.refreshBookShelves(response);\n                  }}\n                  name=\"Currently Reading\"\n                  books={currentlyReadingBooks}\n                />\n                <BookShelf\n                  refreshBookShelves={response => {\n                    this.refreshBookShelves(response);\n                  }}\n                  name=\"Want to Read\"\n                  books={wantToReadBooks}\n                />\n                <BookShelf\n                  refreshBookShelves={response => {\n                    this.refreshBookShelves(response);\n                  }}\n                  name=\"Read\"\n                  books={readBooks}\n                />\n                <div className=\"open-search\">\n                  <Link to=\"/myreads/search\" className=\"add-contact\">\n                    Add a book\n                  </Link>\n                </div>\n              </div>\n            )}\n          />\n\n          <Route\n            path=\"/myreads/search\"\n            render={({ history }) => (\n              <SearchBooks\n                refreshBookShelves={response => {\n                  this.getBooks();\n                }}\n                booksWithCat={catBookIds}\n              />\n            )}\n          />\n        </div>\n      </div>\n    );\n  }\n}\nexport default BooksApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nReactDOM.render(\n  <BrowserRouter>\n    <App />{\" \"}\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}